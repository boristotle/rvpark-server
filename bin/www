#!/usr/bin/env node
'use strict';

// ----- DEPENDENCIES -----

const app = require('../app');
const debug = require('debug')('server:server');
const http = require('http');

// ----- PORT -----

let port = normalizePort(process.env.PORT || '8080');
app.set('port', port);

// ----- CREATE HTTP SERVER -----

let server = http.createServer(app);

// ----- SERVER LISTEN -----

const serverListen = function () {
    server.listen(port);
    server.on('error', onError);
    server.on('listening', onListening);
};


// ----- SET UP DB -----

// TODO: currently only works with node version (12.22.1)

const db = require('../services/data');

//db.sync({force: true})
// serverListen();

// AVOID SYNC IN PRODUCTION MODE
// FIRST TIME RUNNING USE set-database.js
/* */
 db.sync()
    .then(function () {
        console.log("Connected to DB and Synced");
        serverListen();
    })
    .catch(function (err) {
        console.error(err);
    });


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);
    if (isNaN(port)) {
        // named pipe
        return val;
    }
    if (port >= 0) {
        // port number
        return port;
    }
    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}
